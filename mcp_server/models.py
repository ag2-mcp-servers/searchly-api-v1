# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T15:57:00+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field


class SimilarityListItem(BaseModel):
    artist_name: Optional[str] = Field(None, description="Artist's song name.")
    artist_url: Optional[str] = Field(None, description='Artist URL.')
    id: Optional[int] = Field(None, description='Song internal identifier.')
    index_id: Optional[int] = Field(None, description='Index internal identifier.')
    lyrics: Optional[str] = Field(None, description='Song lyrics.')
    percentage: Optional[float] = Field(None, description='Similarity percentage.')
    song_name: Optional[str] = Field(None, description='Song name.')
    song_url: Optional[str] = Field(None, description='Song URL.')


class Response(BaseModel):
    similarity_list: Optional[List[SimilarityListItem]] = Field(
        None, description='Contains all the similarity items representing songs.'
    )


class APIResponseSimilarity(BaseModel):
    error: Optional[bool] = Field(
        None,
        description='Whether or not the request was successfully processed or not.',
    )
    message: Optional[str] = Field(
        None, description='Error message if the request was unsuccessful.'
    )
    response: Optional[Response] = Field(
        None, description='Contains the response data if the request was successful.'
    )


class Result(BaseModel):
    id: Optional[int] = Field(None, description='Song internal identifier.')
    name: Optional[str] = Field(None, description='Song and Artist name.')


class Response1(BaseModel):
    results: Optional[List[Result]] = Field(None, description='Contains all the songs.')


class APIResponseSong(BaseModel):
    error: Optional[bool] = Field(
        None,
        description='Whether or not the request was successfully processed or not.',
    )
    message: Optional[str] = Field(
        None, description='Error message if the request was unsuccessful.'
    )
    response: Optional[Response1] = Field(
        None, description='Contains the response data if the request was successful.'
    )


class SimilarityByContentPostRequest(BaseModel):
    content: Optional[str] = Field(
        None, description='Content for searching similarity.'
    )
