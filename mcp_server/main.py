# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T15:57:00+00:00



import argparse
import json
import os
from typing import *
from typing import Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity

from models import (
    APIResponseSimilarity,
    APIResponseSong,
    SimilarityByContentPostRequest,
)

app = MCPProxy(
    contact={'email': 'hi@asuarez.dev'},
    description='# Introduction\nThe SearchLy API provides similarity searching based on song lyrics.\n\n# Operations\nThe API allows for the `/similarity/by_song` operation, which allows clients to search the similarity for an existing song in the database. Also, the API has an additional `/similarity/by_content` endpoint which allows clients to search similarity given a free String input through a JSON request body. Additional `/song/search` operation is available for searching songs given a query String.\n\n# Endpoint\nThe API endpoint for the SearchLy API v1 is as follows:\n```\nhttps://searchly.asuarez.dev/api/v1\n```\n\n# Motivation\nThis project was built in order to create an API for searching similarities based on song lyrics. There are a lot of songs in the industry and most of them are talking about the same topic. What I wanted to prove with SearchLy was to estimate how similar are two songs between them based on the meaning of their lyrics.\n\nSearchLy is using a database of 100k songs from AZLyrics, using [this scraper](https://github.com/AlbertSuarez/azlyrics-scraper), which is being updated periodically. Then, using word2vec and NMSLIB, it was possible to create an index where you can search similarities using the k-nearest neighbors (KNN) algorithm.\n\n> **Note**: I am currently using a micro-instance from DigitalOcean where the API is deployed, so you should expect a bad performance. However, if this API becomes popular I will deploy it in a bigger instance.\n',
    title='SearchLy API v1',
    version='1.0',
    servers=[{'url': 'https://searchly.asuarez.dev/api/v1'}],
)


@app.post(
    '/similarity/by_content',
    description=""" Endpoint for an end-user client to search similarity by content.

If you want to run the /similarity/by_content operation, you can do so via an HTTP POST command to the following URL:

```
https://searchly.asuarez.dev/api/v1/similarity/by_content
```
 """,
    tags=['similarity_search_operations'],
)
def src_searchly_api_v1_controllers_similarity_by_content(
    body: SimilarityByContentPostRequest,
):
    """
    API endpoint to search similarity using content
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/similarity/by_song',
    description=""" Endpoint for an end-user client to search similarity by song identifier.

If you want to run the /similarity/by_song operation, you can do so via an HTTP GET command to the following URL:

```
https://searchly.asuarez.dev/api/v1/similarity/by_song
```
 """,
    tags=['similarity_search_operations', 'song_query_operations'],
)
def src_searchly_api_v1_controllers_similarity_by_song(song_id: int):
    """
    API endpoint to search similarity using a song identifier
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/song/search',
    description=""" Endpoint for an end-user client to search songs from the database given a String query.

If you want to run the /song/search operation, you can do so via an HTTP GET command to the following URL:

```
https://searchly.asuarez.dev/api/v1/song/search
```
 """,
    tags=['song_query_operations'],
)
def src_searchly_api_v1_controllers_song_search(query: str):
    """
    API endpoint to search songs from the database given a query
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
